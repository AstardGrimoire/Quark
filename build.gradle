buildscript {
    repositories {
        maven {
            url = "https://maven.minecraftforge.net"
        }
    }
}

plugins {
    id 'java-library'
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'pmd'
    id 'com.diffplug.spotless' version '6.22.0'
    id 'net.neoforged.gradle.userdev' version '7.0.180'
}

jarJar.enable()

ext.configFile = file('build.properties')
ext.depsFile = file('dependencies.properties')
ext.config = parseConfig(configFile)
ext.deps = parseConfig(depsFile)

version = "${config.version}-${config.build_number}"
group = "org.violetmoon.${config.mod_id}" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = config.mod_name

compileJava.options.compilerArgs << "-Xlint:all,-classfile,-processing,-deprecation"

java.toolchain.languageVersion = JavaLanguageVersion.of(21)
println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))

if (System.getenv('BUILD_NUMBER') != null) {
    version += "." + System.getenv('BUILD_NUMBER')
}

minecraft.accessTransformers.file rootProject.file('src/main/resources/META-INF/accesstransformer.cfg')

subsystems {
    parchment {
        minecraftVersion = "1.21.1"
        mappingsVersion = "2024.11.17"
    }
}

runs {
    // applies to all the run configs below
    configureEach {
        systemProperty "mixin.debug.export", "true"
        // Recommended logging data for a userdev environment
        // The markers can be added/remove as needed separated by commas.
        // "SCAN": For mods scan.
        // "REGISTRIES": For firing of registry events.
        // "REGISTRYDUMP": For getting the contents of all registries.
        systemProperty 'forge.logging.markers', 'REGISTRIES'

        // Recommended logging level for the console
        // You can set various levels here.
        // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
        systemProperty 'forge.logging.console.level', 'debug'

        modSource project.sourceSets.main
    }

    client {
        workingDirectory project.file('run')
    }

    server {
        workingDirectory project.file('runServer')
        programArgument '--nogui'
    }

    data {
        workingDirectory project.file('runs/data')
        programArguments '--mod', 'quark', // insert your own mod id
                '--all',
                '--output', file('src/generated/resources').getAbsolutePath(),
                '--existing', file('src/main/resources').getAbsolutePath()
    }
}

repositories {
    mavenLocal()
    maven {
        // for Zeta and JEI
        name "blamejared"
        url "https://maven.blamejared.com"
        content {
            includeGroup("org.violetmoon.zeta")
            includeGroup("mezz.jei")
        }
    }
    maven {
        name "TerraformersMC"
        url "https://maven.terraformersmc.com"
    }
    maven {
        name "cursemaven"
        url "https://www.cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
    maven { url = "https://maven.fabricmc.net/" }
    maven { url = "https://maven.theillusivec4.top/" }
    maven { url = "https://api.modrinth.com/maven" }
    maven { url = "https://maven.minecraftforge.net" }
    //maven { url = "https://maven.createmod.net" }
    maven { url = "https://jitpack.io" }
}

dependencies {
    implementation "net.neoforged:neoforge:${deps.neoforge}"

    //annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'
    //normal AP is broken!!
    // annotationProcessor 'net.fabricmc:sponge-mixin:0.12.5+mixin.0.8.5'

    //runtimeOnly fg.deobf("dev.emi:emi-forge:${deps.emi}")
    runtimeOnly "maven.modrinth:spark:${deps.spark}"

    //implementation(jarJar("net.createmod.ponder:Ponder-NeoForge-${config.mc_version}:${deps.ponder}")) { transitive = false }

    implementation files ("localjars/Zeta-1.1-1.jar")
    compileOnly "com.github.glitchfiend:TerraBlender-neoforge:${deps.terrablender}"
    // compile against the JEI API but do not include it at runtime
    compileOnly("mezz.jei:jei-${config.mc_version}-neoforge-api:${deps.jei_version}")
    // at runtime, use the full JEI jar for NeoForge
    runtimeOnly("mezz.jei:jei-${config.mc_version}-neoforge:${deps.jei_version}")
    // implementation fg.deobf("curse.maven:flan-forge-493246:${deps.flan}")
    implementation "curse.maven:lootr-361276:${deps.lootr}"
    // implementation fg.deobf("curse.maven:just-enough-resources-jer-240630:4689010")

    runtimeOnly "curse.maven:nofog-296468:5438578"
    // runtimeOnly fg.deobf("curse.maven:woodworks-543610:5292418")
    // runtimeOnly fg.deobf("curse.maven:blueprint-382216:5292242")
    //runtimeOnly "curse.maven:farmers-delight-398521:5962800"
    //runtimeOnly "dev.emi:emi-neoforge:${deps.emi_version}"

    runtimeOnly "top.theillusivec4.curios:curios-neoforge:${deps.curios}"
    compileOnly "top.theillusivec4.curios:curios-neoforge:${deps.curios}:api"
}

spotless {
    enforceCheck = false // workaround around jenkins having wrong line endings in some files
    java {
        target project.fileTree(dir: 'src/main/java/org/violetmoon/quark', include: '**/*.java')
        //indentWithTabs()
        eclipse().configFile 'spotless/eclipseformat.xml'
        removeUnusedImports()
        importOrderFile 'spotless/eclipse.importorder'
        replaceRegex 'Too much space after if', '(if|for|while|switch) +\\(', '$1('
    }
}

pmd {
    toolVersion '6.42.0'
    incrementalAnalysis.set(true)
    ruleSets = new ArrayList()
    ruleSetFiles = files("spotless/pmd-ruleset.xml")
}

task checkSyntax (group: "verification") {
    // Replace the following line when Spotless is setup
    //dependsOn spotlessJavaCheck, pmdMain
    dependsOn pmdMain
}

processResources {
    // copy everything excluding psd files
    from(sourceSets.main.resources.srcDirs) {
        exclude '**/psd/**'
        duplicatesStrategy 'include'
    }
    
    // Formats 1.0-13.58 to 1.0-13 (removes the build number)
    String zetaVer = deps.zeta.substring(0, deps.zeta.lastIndexOf('.'))
    String curiosVer = deps.curios;

    Map<String, ?> properties = Map.of(
            "zeta_ver", zetaVer,
            "curios_ver", curiosVer,
            // Replaces FML's magic file.jarVersion string with the correct version at build time.
            "file", [jarVersion: project.version]
    )

    properties.forEach((k, v) -> inputs.property(k, v))

    filesMatching("META-INF/mods.toml") {
        expand properties
    }
}

def parseConfig(File config) {
    config.withReader {
        def prop = new Properties()
        prop.load(it)
        return (new ConfigSlurper().parse(prop))
    }
}

jar {
    archiveClassifier = "pure" // Jar without jar-in-jar

     manifest {
        attributes([
            "Specification-Title": "${config.mod_id}",
            "Specification-Vendor": "vazkii",
            "Specification-Version": "1", // We are version 1 of ourselves
            "Implementation-Title": "${config.mod_id}",
            "Implementation-Version": "${version}",
            "Implementation-Vendor" :"vazkii",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
            "MixinConfigs": "quark.mixins.json,quark_integrations.mixins.json"
        ])
    }

    exclude "**/*.bat"
    exclude "**/*.psd"
    exclude "**/*.exe"
    exclude "**/unused"
    exclude "**/genscripts"
}

task sourcesJar(type: Jar) {
    archiveClassifier = "sources"
    from sourceSets.main.allJava
}

tasks.jarJar.configure {
    archiveClassifier = "" // "Main" jar should be the one with jar-in-jar

    exclude "**/*.bat"
    exclude "**/*.psd"
    exclude "**/*.exe"
    exclude "**/unused"
    exclude "**/genscripts"
}

artifacts {
    archives sourcesJar
}

publish.dependsOn(project.tasks.getByName("assemble"))
publish.mustRunAfter(project.tasks.getByName("build"))

publishing {

    publications {

        mavenJava(MavenPublication) {

            groupId project.group
            artifactId project.archivesBaseName
            version project.version
            from components.java

            // Allows the maven pom file to be modified.
            pom.withXml {

                // Go through all the dependencies.
                asNode().dependencies.dependency.each { dep ->

                    println 'Surpressing artifact ' + dep.artifactId.last().value().last() + ' from maven dependencies.'
                    assert dep.parent().remove(dep)
                }
            }

            artifact sourcesJar {
                archiveClassifier = 'sources'
            }

            // jarJar.component(it)
        }
    }

    repositories {
        maven {
            url "file://" + System.getenv("local_maven")
        }

    }
}

// Disables Gradle's custom module metadata from being published to maven. The
// metadata includes mapped dependencies which are not reasonably consumable by
// other mod developers.
tasks.withType(GenerateModuleMetadata) {

    enabled = false
}

allprojects {
    repositories {
        jcenter()
    }

    gradle.projectsEvaluated {
        tasks.withType(JavaCompile) {
            options.compilerArgs << "-Xmaxerrs" << "5000"
        }
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }
